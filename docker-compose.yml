version: '3.3'

services:
  core:
    build: core
    volumes:
      - static_volume:/app/static/
      - media_volume:/app/media/
      - core_volume:/app
    entrypoint: ["sh", "entrypoint.sh"]
    ports:
      - "8000"
    env_file:
      - .env
    depends_on:
      - postgres_db
      - redis
      - rabbitmq
    environment:
      - POSTGRES_HOST=postgres_db
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq

  notification_service:
    build: noti_center
    env_file:
      - .env
    volumes:
      - notification_service_volume:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq

  frontend:
    build: bookingfrontend
    ports:
      - "4200:4200"

  postgres_db:
    image: postgres:16
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data

  nginx:
    build: ./nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      core:
        condition: service_started

  redis:
    image: redis:alpine
    ports:
      - "6379"
    restart: always

  rabbitmq:
     image: rabbitmq:3-management-alpine
     ports:
       - "5672"
     restart: always
     healthcheck:
       test: [ "CMD-SHELL", "rabbitmqctl status" ]
       interval: 10s
       timeout: 5s
       retries: 5

volumes:
  postgres_data:
  static_volume:
  media_volume:

  core_volume:
  notification_service_volume:
